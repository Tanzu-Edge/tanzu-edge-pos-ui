resources:
- name: source-code
  type: git
  source:
    uri: ((tanzu-edge-pos-ui.codeRepo))
    branch: master
- name: config-repo
  type: git
  source:
    uri: ((tanzu-edge-pos-ui.configRepo))
    branch: master
    paths:
     - "k8s/**"
- name: app-image
  type: docker-image
  source:
    repository: ((tanzu-edge-pos-ui.image))
    tag: latest
    username: ((common-secrets.harborUser))
    password: ((common-secrets.harborPassword))
- name: trigger
  type: time
  source: {interval: 30s}
  check_every: 12h
  webhook_token: hello 

jobs:
- name: continuous-integration
  plan:
    - get: source-code
      trigger: true
    - task: compile-and-test
      output_mapping:
        target: target
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: adoptopenjdk
            tag: 11-jdk-hotspot
        inputs:
          - name: source-code
        outputs:
          - name: target
        caches:
          - path: source-code/maven
        run:
          path: /bin/bash
          args:
            - -c
            - |
              cd source-code
              if [[ -d $PWD/maven && ! -d $HOME/.m2 ]]; then
                ln -s "$PWD/maven" "$HOME/.m2"
              fi
              # Added -DskipTests and -Dcheckstyle.skip to speed up task for demo purpose
              # They should not be included in a proper test pipeline
              ./mvnw package -DskipTests -Dcheckstyle.skip
              cp target/*.jar ../target
    - task: update-build-service-image
      params:
        KUBECONFIG_JSON: ((common-secrets.kubeconfigBuildServer))
      input_mapping:
        target: target
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((common-secrets.concourseHelperImage))
            username: ((common-secrets.harborUser))
            password: ((common-secrets.harborPassword))
            tag: latest
        inputs:
          - name: target
        run:
          path: /bin/bash
          args:
            - -c
            - |
              docker login ((common-secrets.harborDomain)) -u '((common-secrets.harborUser))' -p '((common-secrets.harborPassword))'
              echo $KUBECONFIG_JSON>tools-kubeconfig.json
              export KUBECONFIG=tools-kubeconfig.json
              kubectl config set-credentials concourse --token=((common-secrets.kubernetesBuildServiceAccountToken))
              kubectl config set-context concourse-context --cluster=((common-secrets.kubernetesBuildCluster)) --user=concourse
              kubectl config use-context concourse-context
              set +e
              kp image list -n ((tanzu-edge-pos-ui.tbsNamespace)) | grep "tanzu-edge-pos-ui" 
              exists=$?
              set -e

              kubectl -n concourse-main get all

              if [ $exists -eq 0 ]; then
                kp image patch tanzu-edge-pos-ui \
                  --namespace ((tanzu-edge-pos-ui.tbsNamespace)) \
                  --wait \
                  --local-path target/pos-0.0.1-SNAPSHOT.jar
              else
                kp image create tanzu-edge-pos-ui \
                  --tag ((tanzu-edge-pos-ui.image)) \
                  --namespace ((tanzu-edge-pos-ui.tbsNamespace)) \
                  --wait \
                  --local-path target/pos-0.0.1-SNAPSHOT.jar
              fi


- name: continuous-deployment
  public: true
  serial: true
  plan:
    - get: app-image
    - get: trigger
      trigger: true
    - get: config-repo
      trigger: true
    - task: create-wavefront-event
      params:
        WAVEFRONT_API_TOKEN: ((tanzu-edge-pos-ui.wavefrontApiToken))
        WAVEFRONT_URL: ((tanzu-edge-pos-ui.wavefrontUri))
        WAVEFRONT_DEPLOY_EVENT_NAME: ((tanzu-edge-pos-ui.wavefrontDeployEventName))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((common-secrets.concourseHelperImage))
            username: ((common-secrets.harborUser))
            password: ((common-secrets.harborPassword))
            tag: latest
        run:
          path: /bin/bash
          args:
            - -c
            - |
              set -euo pipefail

              START_TIME=$(date +%s000)
              sleep 1
              END_TIME=$(date +%s000)

              curl \
                -X POST \
                --header "Content-Type: application/json" \
                --header "Accept: application/json" \
                --header "Authorization: Bearer ${WAVEFRONT_API_TOKEN}" \
                -d "{
                  \"name\": \"${WAVEFRONT_DEPLOY_EVENT_NAME}\",
                  \"annotations\": {
                    \"severity\": \"info\",
                    \"type\": \"image deploy\",
                    \"details\": \"new tanzu-edge-pos-ui image deployed\"
                  },
                  \"startTime\": "${START_TIME}",
                  \"endTime\": "${END_TIME}"
                }" "${WAVEFRONT_URL}/api/v2/event"

    - task: deploy-app
      params:
        KUBECONFIG_JSON: ((common-secrets.kubeconfigDeployServer))
        SERVERLESS: ((tanzu-edge-pos-ui.serverless))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((common-secrets.concourseHelperImage))
            tag: latest
            username: ((common-secrets.harborUser))
            password: ((common-secrets.harborPassword))
        inputs:
          - name: config-repo
          - name: app-image
        run:
          path: /bin/bash
          args:
            - -c
            - |
              export DIGEST=$(cat app-image/digest)

              # TODO Need to setup the kubeconfig
              echo $KUBECONFIG_JSON>run-kubeconfig.json
              export KUBECONFIG=run-kubeconfig.json
              kubectl config set-credentials concourse --token=((common-secrets.kubernetesDeployServiceAccountToken))
              kubectl config set-context concourse-context --cluster=((common-secrets.kubernetesDeployCluster)) --user=concourse
              kubectl config use-context concourse-context

              # for now only one store
              export i=100
              if [ "$SERVERLESS" = "true" ]; then
                 ytt -f config-repo/k8s/knative-service.yaml -f config-repo/k8s/values.yml \
                 -v posBackend=((tanzu-edge-pos-ui.posBackend)) -v storeId=store-${i} -v image=((tanzu-edge-pos-ui.image))@$DIGEST > myservice.yaml
                 echo "using service definitation: "
                 cat myservice.yaml
                 kn service create --force --pull-secret harbor-regcred -f myservice.yaml -n apps 
              else 
                 ytt -f config-repo/k8s/configmap.yaml -f config-repo/k8s/deployment.yaml -f config-repo/k8s/svc.yaml -f config-repo/k8s/pos-ui-httpproxy.yaml -f config-repo/k8s/values.yml \
                    -v storeId=store-${i} -v image=((tanzu-edge-pos-ui.image))@$DIGEST -v posUri=pos.apps.edge.wrightcode.io | kapp deploy -n apps -a pos-ui -y -f -
              fi


